#!/usr/bin/env python
"""
Heimdallr: Watchman of the Gods

This script is meant to be used as an AuthorizedKeysCommand in your SSH daemon config, allowing you
to read public keys from a variety of configurable sources.

"""

import configparser
import urllib.request
import json
import os
import sqlite3
from sys import argv, stderr, stdout


class Cache:
    """Simple sqlite3 backed cache"""

    def __init__(self, dbpath='/tmp/heimdallr.db'):
        if not os.path.exists(dbpath):
            self.initialize(dbpath)
        self.conn = sqlite3.connect(dbpath)

    @staticmethod
    def initialize(dbpath):
        "Create necessary sqlite3 tables"
        conn = sqlite3.connect(dbpath)
        cur = conn.cursor()
        cur.execute('''CREATE TABLE cache (key text primary key, etag text, value text)''')
        conn.close()

    def get(self, key):
        "Get the cached etag and value dict specified by key"
        cur = self.conn.cursor()
        cur.execute("SELECT etag, value FROM cache WHERE key=?", (key,))
        result = cur.fetchone()
        if result:
            return dict(zip(['etag', 'value'], result))

    def set(self, key, etag, value):
        "Upsert etag and value specified by unique key"
        cur = self.conn.cursor()
        cur.execute(
            "INSERT OR REPLACE INTO cache (key, etag, value) VALUES (?, ?, ?)", (key, etag, value))
        self.conn.commit()
        return self

def get_url(url, headers):
    """Get requested url, returning (code, response)"""
    request = urllib.request.Request(url, None, headers)
    try:
        response = urllib.request.urlopen(request)
    except urllib.error.HTTPError as exception:
        if exception.code == 304:
            return exception.code, None

        raise exception

    return response.code, response


def get_userconfig_or_default(config, username, key, fallback=None):
    """Get the requested key from the specified user's config stanza or fallback to the DEFAULT"""

    userconfig = config[username] if username in config else None

    if userconfig and key in userconfig:
        return userconfig[key]
    return config['DEFAULT'].get(key, fallback)


def load_config():
    """Get the heimdallr configuration file"""
    config = configparser.ConfigParser(allow_no_value=True)
    config.read([
        os.path.abspath('heimdallr.conf'),
        '/etc/heimdallr.conf'
        ])
    return config


def get_provider_names(config):
    """Get names of all providers specified for use by the configuration file"""
    return [x.strip() for x in config['DEFAULT']['providers'].strip().split()]

def transform_key(key, template, user):
    """Parse a key entry and transform it by a provided template.

    A single key is split up into 4 separate keywords: 'options', 'type', 'key', and 'note'.
    The 'options' value is used for things such as 'command=""' or no-pty.
    The 'type' value is the key format, such as 'ssh-rsa'.
    The 'key' value is the actual key data.
    The 'comment' value is the optional key name that is sometimes appended, such as 'user@host'
    The 'user' value is the user attempting to auth

    Replacing options is sometimes helpful when working with upstream key providers such as an
    authorized_keys file which is managed by a system such as Gitlab, where `command` options are
    prepended.
    """

    parts = key.split(' ')
    keytypes = [
        'ssh-rsa',
        'ssh-dss',
        'ssh-ed25519',
        'ecdsa-sha2-nistp521',
        'ecdsa-sha2-nistp384',
        'ecdsa-sha2-nistp256'
        ]

    for keytype in keytypes:
        if keytype in parts:
            index = parts.index(keytype)
            break

    data = {}
    data['options'] = '' if index > 0 else parts[0]
    data['type'] = parts[index]
    data['key'] = parts[index + 1]
    data['comment'] = parts[-1]
    data['user'] = user

    return template.format(**data)


def provider_filename(user, userconfig, cache):
    """Flat file provider

    Helpful for reading an authorized_keys file in a non-standard location

    The path specified by a user's `filename` entry will be read.
    """

    path = userconfig.get('filename', None)

    if not path:
        return []

    path = path.format(**{'user': user})
    lines = []

    for file_path in path.strip().split('\n'):
        cachekey = 'filename/' + file_path
        cached = cache.get(cachekey)
        stat = os.stat(file_path)
        etag = "%dmt" % (stat.st_mtime * 1000)

        if cached and cached['etag'] == etag:
            data = cached['value']
            file_lines = [line.strip() for line in data.split('\n')]
        else:
            src = open(file_path, 'r')
            file_lines = [line.strip() for line in src.readlines()]
            src.close()
            cache.set(cachekey, etag, '\n'.join(file_lines))
        lines += file_lines
    return lines


def provider_github(user, userconfig, cache):
    """Github user's public key registry provider

    Github provides user's public keys through their API, this provider fetches all public keys for
    a given user account.

    """

    # You can specify an alternate username for github keys
    user = userconfig['github'] or user

    headers = {}
    cachekey = 'github/' + user
    cached = cache.get(cachekey)
    if cached:
        headers['if-none-match'] = cached['etag']

    url = 'https://api.github.com/users/%s/keys' % user

    code, response = get_url(url, headers)

    if code == 304:
        data = cached['value']
    else:
        data = response.readall()
        cache.set(cachekey, response.headers.get('etag'), data)

    if data:
        data = json.loads(data.decode('utf-8'))
        return [x['key'] for x in data]

    return []


def provider_website(user, userconfig, cache):
    """Fetch some keys from a web resource.

    Grab keys from a website, assuming you return one per line.

    Set `website` in a user stanza to a URL to use, or set `website` in
    the DEFAULT stanza, {user} will be replaced with the authenticating user.

    It's probably wise to use https hosts and check the cert!
    """

    url = userconfig.get('website', None)
    if not url:
        return []

    url = url.format(**{'user': user})
    headers = {}
    cachekey = 'website/' + user
    cached = cache.get(cachekey)
    if cached:
        headers['if-none-match'] = cached['etag']

    #resp = requests.get(url, headers=headers)
    code, response = get_url(url, headers)

    if code >= 200 and code < 400:
        if code is 304:
            data = cached['value']
        else:
            data = response.readall()
            cache.set(cachekey, response.headers.get('etag'), data)

    if data:
        return [x.strip() for x in data.split('\n')]

    return []


def run_checks(config, providers, provider_methods, cache):
    """Perform a few error checks and run through the config."""
    # check that providers exist
    for provider in providers:
        print("checking provider '%s'" % provider)
        if provider not in provider_methods:
            err("unknown provider '%s' specified in providers list" % provider, 1)

    # verify that at least one provider is in use
    if not providers:
        err("no providers are provided", 1)

    # check all per-user configurations
    for key in config.keys():
        if key == 'DEFAULT':
            continue

        user = key
        userconfig = config[key]
        for item in userconfig.keys():
            if item in providers:
                provider_methods[item](user, userconfig, cache)

    print('OK')
    exit(0)


def err(msg, code=None):
    """Print an error message and emit an exit code if provided."""
    stderr.write(msg + '\n')
    if code:
        exit(code)

def run(provider_methods):
    """Iterate through the requested user's providers and output keys."""
    config = load_config()
    available_providers = provider_methods.keys()

    if config.has_option('DEFAULT', 'cache'):
        cache = Cache(config.get('DEFAULT', 'cache'))
    else:
        cache = Cache('/tmp/heimdallr.db')

    if len(argv) <= 1:
        err('error: please provide a username or --check to run tests', 1)

    if argv[1] == '--check':
        return run_checks(config, available_providers, provider_methods, cache)

    user = argv[1]

    config_section = 'DEFAULT'
    if user in config.sections():
        config_section = user

    for provider in available_providers:
        if config.has_option(config_section, provider):
            keys = provider_methods[provider](user, config[config_section], cache)

            template_name = provider + '_template'
            if config.has_option(config_section, template_name):
                template = config.get(config_section, provider + '_template')
                keys = [transform_key(key, template, user) for key in keys]

            for key in keys:
                stdout.write(key + '\n')



if __name__ == '__main__':
    PROVIDER_METHODS = {
        'github': provider_github,
        'website': provider_website,
        'filename': provider_filename,
        }

    run(PROVIDER_METHODS)

# vim:cc=100:tw=100
